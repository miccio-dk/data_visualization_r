shiny::runApp()
runApp()
runApp()
runApp()
lst_devices_id
as.list(lst_devices_id)
runApp()
list("a", "b")
c("a", "b")
runApp()
runApp()
lst_devices_id
as.array(lst_devices_id)
as.list(lst_devices_id)
as.character(lst_devices_id)
as.array(lst_devices_id$device_id)
runApp()
runApp()
?addPolygons
runApp()
?colorFactor
runApp()
library("digest")
digest(c("a", "b"), algo = "crc32", raw = TRUE)
runApp()
runApp()
range(vdigest(data_sorted$device_id))
range(vdigest(data_sorted$device_id, algo = "crc32"))
range(vdigest(data_sorted$device_id, algo = "xxsha32"))
range(vdigest(data_sorted$device_id, algo = "xxhash32"))
range(vdigest(data_sorted$device_id, algo = "xxhash32", raw = TRUE))
range(vdigest(data_sorted$device_id, algo = "xxhash32", raw = FALSE))
range(vdigest(data_sorted$device_id, algo = "xxhash32", raw = TRUE))
c(1, 2)
vdigest(data_sorted$device_id, algo = "xxhash32", raw = TRUE)
?colorFactor
runApp()
runApp()
?addPolylines
runApp()
runApp()
sl_paths
sl_paths[["ID"]]
sl_paths$ID
colors()
runApp()
runApp()
runApp()
col2rgb("white")
as.array(col2rgb("white"))
as.vector(col2rgb("white"))
runApp()
as.vector(col2rgb("white"))
rgb(as.vector(col2rgb("white")))
runApp()
runApp()
?I
sl_paths
runApp()
sl_paths
dput(sl_paths)
sl_paths$lines
sl_paths.lines
sl_paths
sl_paths@lines
sl_paths@lines@Lines
sl_paths@lines[1]
sl_paths@lines[1]@Lines
(sl_paths@lines[1])@Lines
sl_paths@lines[1]
sl_paths@lines[1]$Lines
sl_paths@lines[1]$Line
sl_paths@lines[1]$Lines
sl_paths@lines[1]@Lines
sl_paths@lines[1]@Line
sl_paths@lines[1].Line
sl_paths@lines[1]$Lines
sl_paths@lines[1]$Lines@Line
sl_paths@lines[1]$ID
sl_paths@lines[1]$a
sl_paths@lines[1]
dput(sl_paths@lines[1])
dput(sl_paths@lines)
dput(sl_paths@lines[1][1])
dput(sl_paths@lines[[1])
dput(sl_paths@lines[[1]])
dput(sl_paths@lines[[1]]@Lines)
sl_paths@lines[[1]]@Lines
sl_paths@lines[[1]]@Lines@coords
sl_paths@lines[[1]]@Lines@
runApp()
sl_paths@lines[[1]]@Lines
sl_paths@lines[[1]]
sl_paths@lines[[1]]@ID
runApp()
runApp()
runApp()
sl_paths@lines[[1]]@Lines
ls
install.packages()
?install.packages
.libPaths()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?SpatialLines
?SpatialLines-class
?`Spatial-class`
?`SpatialLines-class`
?SpatialLinesDataFrame
SpatialLinesDataFrame(sl_paths, unique(data_sorted$device_id))
unique(data_sorted$device_id)
sl_paths
dput(sl_paths)
unique(data_sorted$device_id)
SpatialLinesDataFrame(sl_paths, unique(data_sorted$device_id))
sl_paths@lines
unique.data.frame(data_sorted$device_id)
row.names(unique(data_sorted$device_id)
)
row.names(unique(data_sorted$device_id))
(unique(data_sorted$device_id))
tally(unique(data_sorted$device_id))
tally(as.data.frame(unique(data_sorted$device_id)))
as.data.frame(unique(data_sorted$device_id))
as.data.frame(unique(data_sorted$device_id), row.names = "id") %>% group_by()
as.data.frame(unique(data_sorted$device_id)) %>% group_by("unique(data_sorted$device_id)") %>% tally()
as.data.frame(unique(data_sorted$device_id))
aaa <- as.data.frame(unique(data_sorted$device_id))
View(aaa)
View(aaa)
SpatialLinesDataFrame(sl_paths, unique(data_sorted$device_id))
SpatialLinesDataFrame(sl_paths, as.data.frame(unique(data_sorted$device_id), row.names = unique(data_sorted$device_id))
)
runApp()
runApp()
runApp()
sl_paths$data_unique_id
sl_paths[[1]]$data_unique_id
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dateRangeInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
data
min(data$date_time)
max(data$date_time)
runApp()
runApp()
runApp()
runApp()
format(as.POSIXct(min(allData()$date_time), format = "%d/%m/%Y"), "%Y-%m-%d")
data <- allData()
View(data)
View(data)
format(as.POSIXct(allData()$date_time, format = "%d/%m/%Y"), "%Y-%m-%d")
min(format(as.POSIXct(allData()$date_time, format = "%d/%m/%Y"), "%Y-%m-%d"))
runApp()
runApp()
?gs_edit_cells
runApp()
runApp()
a <- matrix("", nrow = 2, ncol = 5)
View(a)
View(a)
a
runApp()
runApp()
dataAll()
dataAll
runApp()
dataAll
output$dataAll()
output$dataAll
output$allData()
allData()
runApp()
runApp()
install.packages("shinythemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?addLegend
runApp()
?addLayersControl
runApp()
runApp()
runApp()
?clearControls
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(a)
runApp()
install.packages("devtools")
devtools::install_github("jcheng5/googleCharts")
shiny::runApp()
runApp()
install.packages("devtools")
devtools::install_github("jcheng5/googleCharts")
install.packages("devtools")
packageDescription()
installed.packages(plotly)
install.packages("plotly")
packageVersion('plotly')
library(shiny)
library(plotly)
ui <- fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event")
)
server <- function(input, output) {
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
plot_ly(mtcars, x = ~mpg, y = ~wt)
})
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point!" else d
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
shinyUI(fluidPage(
titlePanel("Hello Shiny!"),
fluidRow(
column(4,
wellPanel(
sliderInput("obs", "Number of observations:",
min = 1, max = 1000, value = 500)
)
),
column(8,
plotOutput("distPlot")
)
)
))
runApp()
?wellPanel
?sidebarPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$device_ids
nrow(input$device_ids)
length(input$device_ids)
length(input$device_ids)
nrow(input$device_ids)
input$device_ids
input$device_ids
nrow(input$device_ids)
length(input$device_ids)
runApp()
runApp()
runApp()
runApp()
aa <-  colorFactor(
palette = c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99'),
domain = data_filtered$device_id,
ordered = TRUE
)
aa <-  colorFactor(
palette = c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99'),
domain = c("a", "b"),
ordered = TRUE
)
aa <-  colorFactor(
palette = c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99'),
domain = c("a", "b"),
ordered = TRUE
)
aa <-  colorFactor(
palette = c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99'),
domain = c("a", "b"),
ordered = TRUE
)
a
aa
aa("a")
aa("b")
aa(c("a", "b"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
b <- list("a", "b")
b
b <- c("a", "b")
b
b[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?adjustcolor
runApp()
aa("a")
adjustcolor(aa("a"))
runApp()
adjustcolor(aa("a"))
adjustcolor(aa("a"), alpha.f = 0.2)
adjustcolor(aa("a"), alpha.f = 0.3)
adjustcolor(aa("a"), alpha.f = 0.4)
adjustcolor(aa("a"), alpha.f = 0.6)
adjustcolor(aa("a"), alpha.f = 0.8)
adjustcolor(aa("a"), alpha.f = 1)
adjustcolor(aa("a"), alpha.f = 0)
colors(1)
color(1)
rainbow()
rainbow(1)
col2rgb(rainbow(1))
rgb(col2rgb(rainbow(1)))
rgb(col2rgb(rainbow(1)))
rgb()
rgb(col2rgb(rainbow(1)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(plotly)
airquality_sept <- airquality[which(airquality$Month == 9),]
airquality_sept$Date <- as.Date(paste(airquality_sept$Month, airquality_sept$Day, 1973, sep = "."), format = "%m.%d.%Y")
p <- plot_ly(airquality_sept) %>%
add_trace(x = ~Date, y = ~Wind, type = 'bar', name = 'Wind',
marker = list(color = '#C9EFF9'),
hoverinfo = "text",
text = ~paste(Wind, ' mph')) %>%
add_trace(x = ~Date, y = ~Temp, type = 'scatter', mode = 'lines', name = 'Temperature', yaxis = 'y2',
line = list(color = '#45171D'),
hoverinfo = "text",
text = ~paste(Temp, '°F')) %>%
layout(title = 'New York Wind and Temperature Measurements for September 1973',
xaxis = list(title = ""),
yaxis = list(side = 'left', title = 'Wind in mph', showgrid = FALSE, zeroline = FALSE),
yaxis2 = list(side = 'right', overlaying = "y", title = 'Temperature in degrees F', showgrid = FALSE, zeroline = FALSE))
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="multiple/bar_line")
chart_link
library(plotly)
airquality_sept <- airquality[which(airquality$Month == 9),]
airquality_sept$Date <- as.Date(paste(airquality_sept$Month, airquality_sept$Day, 1973, sep = "."), format = "%m.%d.%Y")
p <- plot_ly(airquality_sept) %>%
add_trace(x = ~Date, y = ~Wind, type = 'bar', name = 'Wind',
marker = list(color = '#C9EFF9'),
hoverinfo = "text",
text = ~paste(Wind, ' mph')) %>%
add_trace(x = ~Date, y = ~Temp, type = 'scatter', mode = 'lines', name = 'Temperature', yaxis = 'y2',
line = list(color = '#45171D'),
hoverinfo = "text",
text = ~paste(Temp, '°F')) %>%
layout(title = 'New York Wind and Temperature Measurements for September 1973',
xaxis = list(title = ""),
yaxis = list(side = 'left', title = 'Wind in mph', showgrid = FALSE, zeroline = FALSE),
yaxis2 = list(side = 'right', overlaying = "y", title = 'Temperature in degrees F', showgrid = FALSE, zeroline = FALSE))
library(plotly)
airquality_sept <- airquality[which(airquality$Month == 9),]
airquality_sept$Date <- as.Date(paste(airquality_sept$Month, airquality_sept$Day, 1973, sep = "."), format = "%m.%d.%Y")
p <- plot_ly(airquality_sept) %>%
add_trace(x = ~Date, y = ~Wind, type = 'bar', name = 'Wind',
marker = list(color = '#C9EFF9'),
hoverinfo = "text",
text = ~paste(Wind, ' mph')) %>%
add_trace(x = ~Date, y = ~Temp, type = 'scatter', mode = 'lines', name = 'Temperature', yaxis = 'y2',
line = list(color = '#45171D'),
hoverinfo = "text",
text = ~paste(Temp, '°F')) %>%
layout(title = 'New York Wind and Temperature Measurements for September 1973',
xaxis = list(title = ""),
yaxis = list(side = 'left', title = 'Wind in mph', showgrid = FALSE, zeroline = FALSE),
yaxis2 = list(side = 'right', overlaying = "y", title = 'Temperature in degrees F', showgrid = FALSE, zeroline = FALSE))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
runApp()
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='riccardo-miccini', token='89B3CE489ADA287B387C5B603DBDB062', secret='+KHnnVJNtaGy8PXDgH7l68RbtYOR6xvqVF7NNvM8')
library(rsconnect)
rsconnect::deployApp()
