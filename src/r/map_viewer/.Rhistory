shiny::runApp()
runApp()
runApp()
runApp()
lst_devices_id
as.list(lst_devices_id)
runApp()
list("a", "b")
c("a", "b")
runApp()
runApp()
lst_devices_id
as.array(lst_devices_id)
as.list(lst_devices_id)
as.character(lst_devices_id)
as.array(lst_devices_id$device_id)
runApp()
runApp()
?addPolygons
runApp()
?colorFactor
runApp()
library("digest")
digest(c("a", "b"), algo = "crc32", raw = TRUE)
runApp()
runApp()
range(vdigest(data_sorted$device_id))
range(vdigest(data_sorted$device_id, algo = "crc32"))
range(vdigest(data_sorted$device_id, algo = "xxsha32"))
range(vdigest(data_sorted$device_id, algo = "xxhash32"))
range(vdigest(data_sorted$device_id, algo = "xxhash32", raw = TRUE))
range(vdigest(data_sorted$device_id, algo = "xxhash32", raw = FALSE))
range(vdigest(data_sorted$device_id, algo = "xxhash32", raw = TRUE))
c(1, 2)
vdigest(data_sorted$device_id, algo = "xxhash32", raw = TRUE)
?colorFactor
runApp()
runApp()
?addPolylines
runApp()
runApp()
sl_paths
sl_paths[["ID"]]
sl_paths$ID
colors()
runApp()
runApp()
runApp()
col2rgb("white")
as.array(col2rgb("white"))
as.vector(col2rgb("white"))
runApp()
as.vector(col2rgb("white"))
rgb(as.vector(col2rgb("white")))
runApp()
runApp()
?I
sl_paths
runApp()
sl_paths
dput(sl_paths)
sl_paths$lines
sl_paths.lines
sl_paths
sl_paths@lines
sl_paths@lines@Lines
sl_paths@lines[1]
sl_paths@lines[1]@Lines
(sl_paths@lines[1])@Lines
sl_paths@lines[1]
sl_paths@lines[1]$Lines
sl_paths@lines[1]$Line
sl_paths@lines[1]$Lines
sl_paths@lines[1]@Lines
sl_paths@lines[1]@Line
sl_paths@lines[1].Line
sl_paths@lines[1]$Lines
sl_paths@lines[1]$Lines@Line
sl_paths@lines[1]$ID
sl_paths@lines[1]$a
sl_paths@lines[1]
dput(sl_paths@lines[1])
dput(sl_paths@lines)
dput(sl_paths@lines[1][1])
dput(sl_paths@lines[[1])
dput(sl_paths@lines[[1]])
dput(sl_paths@lines[[1]]@Lines)
sl_paths@lines[[1]]@Lines
sl_paths@lines[[1]]@Lines@coords
sl_paths@lines[[1]]@Lines@
runApp()
sl_paths@lines[[1]]@Lines
sl_paths@lines[[1]]
sl_paths@lines[[1]]@ID
runApp()
runApp()
runApp()
sl_paths@lines[[1]]@Lines
ls
install.packages()
?install.packages
.libPaths()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?SpatialLines
?SpatialLines-class
?`Spatial-class`
?`SpatialLines-class`
?SpatialLinesDataFrame
SpatialLinesDataFrame(sl_paths, unique(data_sorted$device_id))
unique(data_sorted$device_id)
sl_paths
dput(sl_paths)
unique(data_sorted$device_id)
SpatialLinesDataFrame(sl_paths, unique(data_sorted$device_id))
sl_paths@lines
unique.data.frame(data_sorted$device_id)
row.names(unique(data_sorted$device_id)
)
row.names(unique(data_sorted$device_id))
(unique(data_sorted$device_id))
tally(unique(data_sorted$device_id))
tally(as.data.frame(unique(data_sorted$device_id)))
as.data.frame(unique(data_sorted$device_id))
as.data.frame(unique(data_sorted$device_id), row.names = "id") %>% group_by()
as.data.frame(unique(data_sorted$device_id)) %>% group_by("unique(data_sorted$device_id)") %>% tally()
as.data.frame(unique(data_sorted$device_id))
aaa <- as.data.frame(unique(data_sorted$device_id))
View(aaa)
View(aaa)
SpatialLinesDataFrame(sl_paths, unique(data_sorted$device_id))
SpatialLinesDataFrame(sl_paths, as.data.frame(unique(data_sorted$device_id), row.names = unique(data_sorted$device_id))
)
runApp()
runApp()
runApp()
sl_paths$data_unique_id
sl_paths[[1]]$data_unique_id
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dateRangeInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
data
min(data$date_time)
max(data$date_time)
runApp()
runApp()
runApp()
runApp()
format(as.POSIXct(min(allData()$date_time), format = "%d/%m/%Y"), "%Y-%m-%d")
data <- allData()
View(data)
View(data)
format(as.POSIXct(allData()$date_time, format = "%d/%m/%Y"), "%Y-%m-%d")
min(format(as.POSIXct(allData()$date_time, format = "%d/%m/%Y"), "%Y-%m-%d"))
runApp()
runApp()
?gs_edit_cells
runApp()
runApp()
a <- matrix("", nrow = 2, ncol = 5)
View(a)
View(a)
a
runApp()
runApp()
dataAll()
dataAll
runApp()
dataAll
output$dataAll()
output$dataAll
output$allData()
allData()
runApp()
runApp()
install.packages("shinythemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?addLegend
runApp()
?addLayersControl
runApp()
runApp()
runApp()
?clearControls
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
